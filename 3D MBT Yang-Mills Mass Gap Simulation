<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D MBT Yang-Mills Mass Gap Simulation</title>
    <style>
        body {
            margin: 0;
            background: linear-gradient(135deg, #0a0a0a, #1a1a2e, #16213e);
            font-family: 'Courier New', monospace;
            color: #ffffff;
            overflow: hidden;
        }
        
        #container {
            position: relative;
            width: 100vw;
            height: 100vh;
        }
        
        #controls {
            position: absolute;
            top: 20px;
            left: 20px;
            z-index: 100;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }
        
        .control-group {
            margin-bottom: 15px;
        }
        
        label {
            display: block;
            margin-bottom: 5px;
            color: #00ffff;
            font-size: 12px;
        }
        
        input[type="range"] {
            width: 200px;
            margin-bottom: 5px;
        }
        
        button {
            background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            color: white;
            cursor: pointer;
            margin: 5px;
            font-weight: bold;
            transition: all 0.3s ease;
        }
        
        button:hover {
            transform: scale(1.05);
            box-shadow: 0 5px 15px rgba(255, 107, 107, 0.4);
        }
        
        .perfect-btn {
            background: linear-gradient(45deg, #00ff00, #00cccc) !important;
            width: 100%;
            margin-top: 10px;
            font-size: 14px;
            padding: 12px;
        }
        
        .perfect-btn:hover {
            box-shadow: 0 5px 20px rgba(0, 255, 255, 0.6);
        }
        
        #stats {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 100;
            background: rgba(0, 0, 0, 0.8);
            padding: 20px;
            border-radius: 10px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.1);
            min-width: 200px;
        }
        
        .stat-item {
            margin-bottom: 10px;
            font-size: 14px;
        }
        
        .stat-label {
            color: #00ffff;
        }
        
        .stat-value {
            color: #ff6b6b;
            font-weight: bold;
        }
        
        #title {
            position: absolute;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 100;
            text-align: center;
            font-size: 24px;
            font-weight: bold;
            text-shadow: 0 0 20px #00ffff;
            color: #00ffff;
        }
        
        .energy-bar {
            width: 100%;
            height: 20px;
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            overflow: hidden;
            margin-top: 5px;
        }
        
        .energy-fill {
            height: 100%;
            background: linear-gradient(90deg, #ff6b6b, #ffa500, #ffff00);
            transition: width 0.3s ease;
            border-radius: 10px;
        }
        
        .button-row {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
        }
        
        .button-row button {
            flex: 1;
            min-width: 80px;
        }
    </style>
</head>
<body>
    <div id="container">
        <div id="controls">
            <h3 style="margin-top: 0; color: #00ffff;">MBT Parameters</h3>
            
            <div class="control-group">
                <label for="resistance">Curvature Resistance (α): <span id="resistanceValue">0.8</span></label>
                <input type="range" id="resistance" min="0.1" max="2.0" step="0.1" value="0.8">
            </div>
            
            <div class="control-group">
                <label for="damping">Damping: <span id="dampingValue">0.02</span></label>
                <input type="range" id="damping" min="0.01" max="0.1" step="0.01" value="0.02">
            </div>
            
            <div class="control-group">
                <label for="excitationStrength">Excitation Strength: <span id="excitationValue">2.0</span></label>
                <input type="range" id="excitationStrength" min="0.5" max="5.0" step="0.1" value="2.0">
            </div>
            
            <div class="button-row">
                <button onclick="addExcitation()">Add Wave</button>
                <button onclick="resetSimulation()">Reset</button>
                <button onclick="togglePause()" id="pauseBtn">[SPACE] Pause</button>
            </div>
            
            <button class="perfect-btn" onclick="setPerfectSettings()" id="perfectBtn">
                ⚡ Perfect Settings - Optimal MBT Demo
            </button>
        </div>
        
        <div id="stats">
            <h3 style="margin-top: 0; color: #00ffff;">Field Statistics</h3>
            
            <div class="stat-item">
                <span class="stat-label">Total Energy:</span>
                <span class="stat-value" id="totalEnergy">0.000</span>
            </div>
            
            <div class="stat-item">
                <span class="stat-label">Mass Gap:</span>
                <span class="stat-value" id="massGap">0.000</span>
            </div>
            
            <div class="energy-bar">
                <div class="energy-fill" id="energyBar"></div>
            </div>
            
            <div class="stat-item">
                <span class="stat-label">Time Steps:</span>
                <span class="stat-value" id="timeSteps">0</span>
            </div>
            
            <div class="stat-item">
                <span class="stat-label">Field Intensity:</span>
                <span class="stat-value" id="fieldIntensity">0.000</span>
            </div>
            
            <div class="stat-item">
                <span class="stat-label">Curvature:</span>
                <span class="stat-value" id="curvatureValue">0.000</span>
            </div>
        </div>
        
        <div id="title">
            MBT Yang-Mills Mass Gap Theory - 3D Visualization
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Global variables
        let scene, camera, renderer, field3D, curvatureField;
        let fieldGeometry, fieldMaterial, fieldMesh;
        let curvatureGeometry, curvatureMaterial, curvatureMesh;
        let particles = [];
        let isRunning = true;
        let timeStep = 0;
        
        // Simulation parameters
        let params = {
            gridSize: 32,
            resistance: 0.8,
            damping: 0.02,
            excitationStrength: 2.0,
            waveSpeed: 0.25
        };
        
        // Field arrays
        let field = [];
        let fieldPrev = [];
        let fieldNext = [];
        let curvature = [];
        let energyHistory = [];
        let minEnergy = Infinity;
        
        // Initialize the simulation
        function init() {
            setupScene();
            initializeField();
            createFieldVisualization();
            createCurvatureVisualization();
            createParticleSystem();
            setupEventListeners();
            animate();
        }
        
        function setupScene() {
            scene = new THREE.Scene();
            scene.fog = new THREE.Fog(0x0a0a0a, 10, 50);
            
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.set(20, 20, 20);
            camera.lookAt(0, 0, 0);
            
            renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x0a0a0a, 0.8);
            renderer.shadowMap.enabled = true;
            renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            document.getElementById('container').appendChild(renderer.domElement);
            
            // Add lights
            const ambientLight = new THREE.AmbientLight(0x404040, 0.3);
            scene.add(ambientLight);
            
            const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
            directionalLight.position.set(10, 10, 5);
            directionalLight.castShadow = true;
            scene.add(directionalLight);
            
            // Add point lights for dramatic effect
            const pointLight1 = new THREE.PointLight(0x00ffff, 1, 30);
            pointLight1.position.set(15, 10, 15);
            scene.add(pointLight1);
            
            const pointLight2 = new THREE.PointLight(0xff6b6b, 1, 30);
            pointLight2.position.set(-15, 10, -15);
            scene.add(pointLight2);
        }
        
        function initializeField() {
            const N = params.gridSize;
            
            // Initialize 3D arrays
            field = Array(N).fill().map(() => Array(N).fill().map(() => Array(N).fill(0)));
            fieldPrev = Array(N).fill().map(() => Array(N).fill().map(() => Array(N).fill(0)));
            fieldNext = Array(N).fill().map(() => Array(N).fill().map(() => Array(N).fill(0)));
            curvature = Array(N).fill().map(() => Array(N).fill().map(() => Array(N).fill(0)));
            
            // Add central excitation
            const center = Math.floor(N / 2);
            field[center][center][center] = params.excitationStrength;
            
            // Initialize curvature field
            for (let i = 0; i < N; i++) {
                for (let j = 0; j < N; j++) {
                    for (let k = 0; k < N; k++) {
                        const x = (i / N) * 10;
                        const y = (j / N) * 10;
                        const z = (k / N) * 10;
                        curvature[i][j][k] = Math.sin(2 * Math.PI * x / 10) + 
                                           0.3 * Math.cos(6 * Math.PI * y / 10) +
                                           0.2 * Math.sin(4 * Math.PI * z / 10);
                    }
                }
            }
        }
        
        function createFieldVisualization() {
            const N = params.gridSize;
            
            // Create instanced geometry for field points
            const geometry = new THREE.SphereGeometry(0.1, 8, 6);
            const material = new THREE.MeshPhongMaterial({
                transparent: true,
                opacity: 0.8
            });
            
            fieldMesh = new THREE.InstancedMesh(geometry, material, N * N * N);
            
            let index = 0;
            for (let i = 0; i < N; i++) {
                for (let j = 0; j < N; j++) {
                    for (let k = 0; k < N; k++) {
                        const matrix = new THREE.Matrix4();
                        matrix.setPosition(
                            (i - N/2) * 0.6,
                            (j - N/2) * 0.6,
                            (k - N/2) * 0.6
                        );
                        fieldMesh.setMatrixAt(index, matrix);
                        
                        const color = new THREE.Color();
                        color.setHSL(0.1, 1.0, 0.5);
                        fieldMesh.setColorAt(index, color);
                        
                        index++;
                    }
                }
            }
            
            scene.add(fieldMesh);
        }
        
        function createCurvatureVisualization() {
            const N = params.gridSize;
            const geometry = new THREE.BoxGeometry(0.05, 0.05, 0.05);
            const material = new THREE.MeshPhongMaterial({
                transparent: true,
                opacity: 0.3,
                color: 0x00ffff
            });
            
            curvatureMesh = new THREE.InstancedMesh(geometry, material, N * N * N);
            
            let index = 0;
            for (let i = 0; i < N; i++) {
                for (let j = 0; j < N; j++) {
                    for (let k = 0; k < N; k++) {
                        const matrix = new THREE.Matrix4();
                        const scale = Math.abs(curvature[i][j][k]) * 2 + 0.5;
                        matrix.makeScale(scale, scale, scale);
                        matrix.setPosition(
                            (i - N/2) * 0.6,
                            (j - N/2) * 0.6,
                            (k - N/2) * 0.6
                        );
                        curvatureMesh.setMatrixAt(index, matrix);
                        index++;
                    }
                }
            }
            
            scene.add(curvatureMesh);
        }
        
        function createParticleSystem() {
            const particleCount = 1000;
            const positions = new Float32Array(particleCount * 3);
            const colors = new Float32Array(particleCount * 3);
            
            for (let i = 0; i < particleCount; i++) {
                positions[i * 3] = (Math.random() - 0.5) * 50;
                positions[i * 3 + 1] = (Math.random() - 0.5) * 50;
                positions[i * 3 + 2] = (Math.random() - 0.5) * 50;
                
                colors[i * 3] = Math.random() * 0.5 + 0.5;
                colors[i * 3 + 1] = Math.random() * 0.3;
                colors[i * 3 + 2] = Math.random() * 0.8 + 0.2;
            }
            
            const geometry = new THREE.BufferGeometry();
            geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
            geometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
            
            const material = new THREE.PointsMaterial({
                size: 0.1,
                vertexColors: true,
                transparent: true,
                opacity: 0.6
            });
            
            const particleSystem = new THREE.Points(geometry, material);
            scene.add(particleSystem);
            particles.push(particleSystem);
        }
        
        function updateField() {
            if (!isRunning) return;
            
            const N = params.gridSize;
            let totalEnergy = 0;
            let maxFieldValue = 0;
            let totalCurvature = 0;
            
            // 3D wave equation with MBT resistance
            for (let i = 1; i < N - 1; i++) {
                for (let j = 1; j < N - 1; j++) {
                    for (let k = 1; k < N - 1; k++) {
                        // 3D Laplacian
                        const laplacian = (
                            field[i+1][j][k] + field[i-1][j][k] +
                            field[i][j+1][k] + field[i][j-1][k] +
                            field[i][j][k+1] + field[i][j][k-1] -
                            6 * field[i][j][k]
                        );
                        
                        // MBT resistance term
                        const gradField = Math.sqrt(
                            Math.pow(field[i+1][j][k] - field[i-1][j][k], 2) +
                            Math.pow(field[i][j+1][k] - field[i][j-1][k], 2) +
                            Math.pow(field[i][j][k+1] - field[i][j][k-1], 2)
                        );
                        
                        const gradCurvature = Math.sqrt(
                            Math.pow(curvature[i+1][j][k] - curvature[i-1][j][k], 2) +
                            Math.pow(curvature[i][j+1][k] - curvature[i][j-1][k], 2) +
                            Math.pow(curvature[i][j][k+1] - curvature[i][j][k-1], 2)
                        );
                        
                        const resistance = params.resistance * gradField * gradCurvature;
                        
                        // Update equation with numerical stability
                        fieldNext[i][j][k] = (2 - params.damping) * field[i][j][k] - 
                                           (1 - params.damping) * fieldPrev[i][j][k] + 
                                           params.waveSpeed * laplacian - 
                                           resistance * 0.01;
                        
                        // Prevent underflow - maintain minimum energy floor
                        const minFieldValue = 1e-6; // Computational mass gap
                        if (Math.abs(fieldNext[i][j][k]) < minFieldValue && Math.abs(fieldNext[i][j][k]) > 0) {
                            fieldNext[i][j][k] = Math.sign(fieldNext[i][j][k]) * minFieldValue;
                        }
                        
                        // Prevent NaN propagation
                        if (isNaN(fieldNext[i][j][k]) || !isFinite(fieldNext[i][j][k])) {
                            fieldNext[i][j][k] = 0;
                        }
                        
                        // Calculate energy components with stability checks
                        const kinetic = 0.5 * Math.pow(field[i][j][k] - fieldPrev[i][j][k], 2);
                        const potential = 0.5 * Math.pow(laplacian, 2);
                        const energyContrib = kinetic + potential;
                        
                        // Add energy with NaN protection
                        if (isFinite(energyContrib)) {
                            totalEnergy += energyContrib;
                        }
                        
                        maxFieldValue = Math.max(maxFieldValue, Math.abs(field[i][j][k]));
                        totalCurvature += Math.abs(curvature[i][j][k]);
                    }
                }
            }
            
            // Swap arrays
            [fieldPrev, field, fieldNext] = [field, fieldNext, fieldPrev];
            
            // Update energy statistics
            energyHistory.push(totalEnergy);
            if (energyHistory.length > 100) energyHistory.shift();
            
            minEnergy = Math.min(minEnergy, totalEnergy);
            const massGap = minEnergy;
            
            // Update UI
            updateStats(totalEnergy, massGap, maxFieldValue, totalCurvature);
            updateVisualization();
            
            timeStep++;
        }
        
        function updateVisualization() {
            const N = params.gridSize;
            let index = 0;
            
            for (let i = 0; i < N; i++) {
                for (let j = 0; j < N; j++) {
                    for (let k = 0; k < N; k++) {
                        const value = Math.abs(field[i][j][k]);
                        const matrix = new THREE.Matrix4();
                        const scale = value * 3 + 0.1;
                        
                        matrix.makeScale(scale, scale, scale);
                        matrix.setPosition(
                            (i - N/2) * 0.6,
                            (j - N/2) * 0.6,
                            (k - N/2) * 0.6
                        );
                        fieldMesh.setMatrixAt(index, matrix);
                        
                        // Color based on field intensity
                        const color = new THREE.Color();
                        const hue = Math.min(value * 0.3, 0.8);
                        color.setHSL(hue, 1.0, 0.5);
                        fieldMesh.setColorAt(index, color);
                        
                        index++;
                    }
                }
            }
            
            fieldMesh.instanceMatrix.needsUpdate = true;
            fieldMesh.instanceColor.needsUpdate = true;
            
            // Rotate camera
            const time = Date.now() * 0.0005;
            camera.position.x = Math.cos(time) * 25;
            camera.position.z = Math.sin(time) * 25;
            camera.lookAt(0, 0, 0);
            
            // Animate particles
            particles.forEach(particle => {
                particle.rotation.y += 0.01;
                particle.rotation.x += 0.005;
            });
        }
        
        function updateStats(energy, massGap, fieldIntensity, curvatureVal) {
            document.getElementById('totalEnergy').textContent = energy.toFixed(3);
            document.getElementById('massGap').textContent = massGap.toFixed(3);
            document.getElementById('timeSteps').textContent = timeStep;
            document.getElementById('fieldIntensity').textContent = fieldIntensity.toFixed(3);
            document.getElementById('curvatureValue').textContent = (curvatureVal / 1000).toFixed(3);
            
            // Update energy bar
            const maxEnergy = Math.max(...energyHistory);
            const percentage = maxEnergy > 0 ? (energy / maxEnergy) * 100 : 0;
            document.getElementById('energyBar').style.width = percentage + '%';
        }
        
        function addExcitation() {
            const N = params.gridSize;
            const x = Math.floor(Math.random() * (N - 10)) + 5;
            const y = Math.floor(Math.random() * (N - 10)) + 5;
            const z = Math.floor(Math.random() * (N - 10)) + 5;
            
            field[x][y][z] += params.excitationStrength;
        }
        
        function resetSimulation() {
            timeStep = 0;
            minEnergy = Infinity;
            energyHistory = [];
            initializeField();
        }
        
        function togglePause() {
            isRunning = !isRunning;
            document.getElementById('pauseBtn').textContent = 
                isRunning ? '[SPACE] Pause' : '[SPACE] Resume';
        }
        
        function setPerfectSettings() {
            // Show visual feedback
            const button = document.getElementById('perfectBtn');
            const originalText = button.textContent;
            button.textContent = "⚡ Applying Perfect Settings...";
            button.style.background = "linear-gradient(45deg, #ff6b6b, #ffa500)";
            
            // Optimal parameters for demonstrating MBT mass gap behavior
            params.resistance = 1.3;  // Strong curvature resistance for clear localization
            params.damping = 0.035;   // Moderate damping to show energy stabilization
            params.excitationStrength = 4.0;  // High initial energy for dramatic effect
            params.waveSpeed = 0.35;  // Faster wave propagation for better dynamics
            
            // Update UI sliders with forced refresh
            const resistanceSlider = document.getElementById('resistance');
            const dampingSlider = document.getElementById('damping');
            const excitationSlider = document.getElementById('excitationStrength');
            
            resistanceSlider.value = params.resistance;
            document.getElementById('resistanceValue').textContent = params.resistance.toFixed(1);
            
            dampingSlider.value = params.damping;
            document.getElementById('dampingValue').textContent = params.damping.toFixed(3);
            
            excitationSlider.value = params.excitationStrength;
            document.getElementById('excitationValue').textContent = params.excitationStrength.toFixed(1);
            
            // Reset simulation with new parameters
            resetSimulation();
            
            // Add multiple strategic excitations for spectacular visualization
            setTimeout(() => {
                const N = params.gridSize;
                const center = Math.floor(N/2);
                
                // Central strong excitation
                field[center][center][center] = params.excitationStrength;
                
                // Add four corner excitations for interference patterns
                const offset = Math.floor(N/3);
                field[offset][offset][offset] = params.excitationStrength * 0.8;
                field[N-offset][offset][offset] = params.excitationStrength * 0.8;
                field[offset][N-offset][offset] = params.excitationStrength * 0.8;
                field[offset][offset][N-offset] = params.excitationStrength * 0.8;
                
                // Add some mid-range excitations for complex patterns
                field[center + 6][center][center] = params.excitationStrength * 0.6;
                field[center - 6][center][center] = params.excitationStrength * 0.6;
                field[center][center + 6][center] = params.excitationStrength * 0.6;
                field[center][center - 6][center] = params.excitationStrength * 0.6;
                field[center][center][center + 6] = params.excitationStrength * 0.6;
                field[center][center][center - 6] = params.excitationStrength * 0.6;
                
                console.log("🌟 Perfect MBT Settings Applied! Watch the mass gap demonstration!");
                
                // Reset button appearance
                setTimeout(() => {
                    button.textContent = originalText;
                    button.style.background = "linear-gradient(45deg, #00ff00, #00cccc)";
                }, 2000);
            }, 300);
        }
        
        function setupEventListeners() {
            // Parameter controls
            document.getElementById('resistance').addEventListener('input', (e) => {
                params.resistance = parseFloat(e.target.value);
                document.getElementById('resistanceValue').textContent = params.resistance.toFixed(1);
            });
            
            document.getElementById('damping').addEventListener('input', (e) => {
                params.damping = parseFloat(e.target.value);
                document.getElementById('dampingValue').textContent = params.damping.toFixed(3);
            });
            
            document.getElementById('excitationStrength').addEventListener('input', (e) => {
                params.excitationStrength = parseFloat(e.target.value);
                document.getElementById('excitationValue').textContent = params.excitationStrength.toFixed(1);
            });
            
            // Keyboard controls
            document.addEventListener('keydown', (e) => {
                if (e.code === 'Space') {
                    e.preventDefault();
                    togglePause();
                }
            });
            
            // Window resize
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        }
        
        function animate() {
            requestAnimationFrame(animate);
            updateField();
            renderer.render(scene, camera);
        }
        
        // Start the simulation
        init();
    </script>
</body>
</html>
